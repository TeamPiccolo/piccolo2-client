#!/usr/bin/env python

# This script should be run on the Raspberry Pi. Might need to start it with
# nohup (no hangup).

# Import required Piccolo Client modules.
from piccolo2.client import PiccoloJSONRPCClient

# Import the Raspberry Pi General Purpose Input-Output (GPIO) library
import RPi.GPIO as gpio
# Import Python modules.
import datetime
import argparse
import logging
import time
import sys

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--debug', action='store_true',default=False,help="enable debugging output")
    parser.add_argument('--list-spectrometers','-l',action='store_true',default=False,help="list connected spectormeters and exist")
    parser.add_argument('--auto-integration-time','-a',action='store_true',default=False,help="determine autointegration time automatically at start up time")
    parser.add_argument('--downwelling-integration-time','-D',dest="downwelling",default=[],nargs='*',metavar="NAME:TIME",help="set the downwelling integration time of spectrometer NAME to TIME (in ms)")
    parser.add_argument('--upwelling-integration-time','-U',dest="upwelling",default=[],nargs='*',metavar="NAME:TIME",help="set the upwelling integration time of spectrometer NAME to TIME (in ms)")
    parser.add_argument('-n','--number-cycles',metavar='N',type=int,default=1,help="set the number of cycles, default=1")
    parser.add_argument('-d','--delay',type=float,metavar='D',default=0.,help="delay between measurements in ms, default=0")

    args = parser.parse_args()

    # Which port is the Pixhawk trigger signal connected to? It should be on GPIO
    # port 12, but can be moved if necessary, Avoid ports 5, 17, 18, 22, 23, 24, 25
    # and 27 as these are used by the Piccolo's shutters and LEDs.
    port = 12 # Should be on GPIO 12.

    # Set up logging.
    log = logging.getLogger("piccolo")
    if args.debug:
        log.setLevel(logging.DEBUG)
    else:
        log.setLevel(logging.INFO)
    handler = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s %(levelname)s: %(name)s: %(message)s')
    handler.setFormatter(formatter)
    log.addHandler(handler)

    # Connect.
    log.info('Running Piccolo Client...')
    log.info('Connecting to Piccolo Server...')
    piccolo = PiccoloJSONRPCClient('http://localhost:8080')

    # Now need a list of spectrometers. Note that spectrometer "names" are slightly
    # different to their serial numberrs. They generall start with "S_". Example:
    # "S_USB2H16355".
    spectrometers = piccolo.piccolo.getSpectrometerList()
    log.info('Spectrometer names are: {}'.format(', '.join(spectrometers)))
    if args.list_spectrometers:
        for s in spectrometers:
            print s
        sys.exit(0)    

    clock = piccolo.piccolo.getClock()
    log.info('The Piccolo clock is set to: {}'.format(clock))

    if piccolo.piccolo.isMountedDataDir():
        log.info('The data directory is mounted.')
    else:
        log.info('The data directory is not mounted.')


    if args.auto_integration_time:
        log.info('Setting integration times automatically...')
        piccolo.piccolo.setIntegrationTimeAuto()

        log.debug('Waiting for autointegration to complete...')
        results = piccolo.piccolo.checkAutoIntegrationResults(block=True)
        log.debug('Autointegration completed')
    else:
        integrationTimes = {}
        for d in ['downwelling','upwelling']:
            integrationTimes[d] = {}
            for iTime in getattr(args,d):
                tmp = iTime.split(':')
                try:
                    s = tmp[0]
                    t = float(tmp[1])
                except:
                    parser.error("Cannot parse downwelling time %s"%iTime)
                if s not in spectrometers:
                    parser.error("Spectrometer %s not in list of spectormeters"%s)
                integrationTimes[d][s] = t
        if len(integrationTimes['downwelling'])>0 or len(integrationTimes['upwelling'])>0:
            log.info('Setting integration times manually...')
            for d in integrationTimes:
                for s in integrationTimes[d]:
                    piccolo.piccolo.setIntegrationTimeManual(
                        shutter=d,spectrometer=s,milliseconds=integrationTimes[d][s])

    # Whether auto or manual, write the integration times to the log.
    for s in spectrometers:
        up = piccolo.piccolo.getIntegrationTime(shutter='upwelling', spectrometer=s)
        down = piccolo.piccolo.getIntegrationTime(shutter='downwelling', spectrometer=s)
        log.info('Spectrometer {}, upwelling {} ms, downwelling {} ms'.format(s, up, down))

    # Configure the GPIO port to receive a trigger signal from a Pixhawk autopilot.
    log.info('Setting port GPIO12 to receive the Pixhawk trigger...')
    gpio.setmode(gpio.BCM)
    gpio.setup(port, gpio.IN)
    trigger = gpio.input(port)
    if trigger:
        # If the trigger signal is high initially this probably indicates an electronics problem. Check the connections. The LED
        log.error('Cannot start Piccolo Client because the Pixhawk trigger signal is active (high). Check that the trigger signal from the Pixhawk is connected and that it is low. The Pixhawk trigger LED should be off.')
        sys.exit(1)
    log.info('Finished setting up port ')

    # Wait for the trigger input from the Pixhawk.
    while True: # This is an infinite loop!
        trigger = gpio.input(port)
        try:
           status = piccolo.piccolo.status()
        except:
           log.warn('could not get status, trying again')
           continue

        if trigger == 1 and not status.busy:

            log.info('Got trigger signal. Starting measurements.')

            # delay is the time in seconds between recordings.
            piccolo.piccolo.record(delay=args.delay,nCycles=args.number_cycles)
        else:
            log.debug('waiting for trigger signal')

        time.sleep(1)

if __name__ == '__main__':
    main()
